        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * unittest2: cardtest2.c dominion.o rngs.o
        -:    5: *      gcc -o AdventurerTest -g  cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:    6: *
        -:    7:*/
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include <math.h>
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:#define DEBUG 0
        -:   17:#define NOISY_TEST 1
        -:   18:#define MAX_CARDS 10
        -:   19:
        -:   20:
function main called 1 returned 100% blocks executed 74%
        1:   21:int main(){
        -:   22:	struct gameState state,pre;
        -:   23:	
        -:   24:	int i;
        1:   25:	int r = -5;
        1:   26:	int n = 0;
        1:   27:	int k[10] = {adventurer, council_room, feast, gardens,
        -:   28:		mine,remodel, smithy, village, baron, great_hall};
        -:   29:	
    26301:   30:	for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    26300:   31:      ((char*)&state)[i] = floor(Random() * 256);
call    0 returned 100%
        -:   32:    }
        -:   33:	
        1:   34:	r = initializeGame(2, k, 1, &state);
call    0 returned 100%
        -:   35:	
        1:   36:	printf ("initializeGame(4, k, 1, &G) = %d\n", r);
call    0 returned 100%
        1:   37:	assert(r == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   38:	
        1:   39:	state.hand[0][state.handCount[0]] = adventurer;//Add card to hand
        1:   40:    state.handCount[0]++;//Increment hand count
        -:   41:	
        1:   42:	memcpy(&pre, &state, sizeof(struct gameState));
        -:   43:	//Test Adventurer card
        1:   44:	r = cardEffect(adventurer, 1,2,3,&state,state.handCount[0],&n);
call    0 returned 100%
        -:   45:	
        -:   46:	//Pre count + 2 Treasury cards
        1:   47:	assert(pre.handCount[0] == (state.handCount[0] - 1));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   48:	assert(pre.playedCardCount == (state.playedCardCount -1));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   49:	assert(state.discardCount[0] != 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   50:	assert((pre.discardCount[0]+pre.deckCount[0]) == (state.discardCount[0] + (state.deckCount[0] + 2)));
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   51:	
        1:   52:	return 0;
        -:   53:}
