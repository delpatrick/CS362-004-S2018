        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define DEBUG 0
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11://The basic functionality of the Adventurer card is to allow the player to draw cards
        -:   12://from the deck until two treasury cards were drawn. The drawn cards, that were not treasure cards,
        -:   13://were placed in the discard pile.
function checkplayAdventurer called 10000 returned 100% blocks executed 91%
    10000:   14:int checkplayAdventurer(int p,int handCnt, int tresMulti, struct gameState *post, int n) {
        -:   15:  int r;
        -:   16:  struct gameState pre;
        -:   17:  //Added for weeksr testing
    10000:   18:  int drawnTreasure  = 0;
    10000:   19:  int cardDrawn = 0;
        -:   20:  int temphand[MAX_HAND];
    10000:   21:  int z = 0; 
    10000:   22:  int ret = 0;
        -:   23:  
    10000:   24:  memcpy(&pre, post, sizeof(struct gameState));
        -:   25:    
    10000:   26:  r = playAdventurer(drawnTreasure,p,cardDrawn,temphand,z,post,0);
call    0 returned 100%
        -:   27:
    10000:   28:  assert (r == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   29:  //replace assert for easier output
    10000:   30:  if (pre.handCount[p] != (post->handCount[p] - 1))//Pre count + 2 Treasury cards - discard
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   31:  {
       34:   32:	  printf("Failed HandCount (%d): pre - %d, post - %d \n",n,pre.handCount[p],post->handCount[p]);
call    0 returned 100%
       34:   33:	  ret++;
        -:   34:  }
        -:   35:  
    10000:   36:  if ((pre.discardCount[p]+pre.deckCount[p]) != (post->discardCount[p] + (post->deckCount[p] + 2)))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   37:  {
       68:   38:	  printf("Failed discard/deck count (%d): pre - %d, post - %d \n",n,
call    0 returned 100%
       34:   39:			(pre.discardCount[p]+pre.deckCount[p]), 
       34:   40:			(post->discardCount[p] + (post->deckCount[p] + 2)));
        -:   41:			
       34:   42:	  ret++;
        -:   43:  }
        -:   44:  
    10000:   45:  return ret;
        -:   46:}
        -:   47:
function main called 1 returned 100% blocks executed 100%
        1:   48:int main () {
        -:   49:
        -:   50:  int i, n, r,f;
        1:   51:  int p 			= 0;
        1:   52:  int t 			= 0;
        1:   53:  int remainTrs		= 2;
        1:   54:  int deckCount 	= 0;
        1:   55:  int discardCount	= 0;
        1:   56:  int handCount		= 0;
        -:   57:
        -:   58:  struct gameState G;
        -:   59:
        1:   60:  SelectStream(2);
call    0 returned 100%
        1:   61:  PutSeed(3);
call    0 returned 100%
        -:   62:
    10001:   63:  for (n = 0; n < 10000; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
263010000:   64:    for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
263000000:   65:      ((char*)&G)[i] = floor(Random() * 256);
call    0 returned 100%
        -:   66:    }
    10000:   67:	remainTrs = 2;  //Set number of treasury cards 
        -:   68:	 
        -:   69:    //which of two players is current, player zero is allowed
    10000:   70:	p = floor(Random() * 2);
call    0 returned 100%
        -:   71:	
        -:   72:	//fill deck with a treasure card every t cards, 
        -:   73:	//zero not allowed due to Div by zero issue
    10000:   74:	t = ceil(Random() * 5);// + 1;
call    0 returned 100%
        -:   75:	
        -:   76:	//determine the size of the initial handCount
    10000:   77:	handCount = floor(Random() * MAX_HAND);
call    0 returned 100%
        -:   78:	
        -:   79:	//figure out deck and  discard count and ensure that combined
        -:   80:	//they will allow for two treasury cards
        -:   81:	do{
    10000:   82:		if (n > 0 && (n % 100) == 0){
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       99:   83:			deckCount = 0;
       99:   84:			discardCount = t*3;
        -:   85:			
        -:   86:		}else{
     9901:   87:			deckCount = floor(Random() * MAX_DECK);
call    0 returned 100%
     9901:   88:			discardCount = floor(Random() * MAX_DECK);
call    0 returned 100%
        -:   89:		}
    10000:   90:	}while ((deckCount + discardCount) < (t*2));
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:   91:	
        -:   92:	//Fill counts 
    10000:   93:	G.whoseTurn = p;
    10000:   94:	G.deckCount[p] = deckCount;
    10000:   95:	G.discardCount[p] = discardCount;
    10000:   96:	G.handCount[p] = handCount;
        -:   97:	
        -:   98:	//added for weeksr testing
    10000:   99:	G.hand[p][0] = adventurer;
    10000:  100:	G.playedCardCount = 0;
        -:  101:	
        -:  102:	//Fill decks
    10000:  103:	if (deckCount >= (t*2)){
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  104:		//populate the deck with random cards with each 't' card as a treasury card
  2485959:  105:		for (i=0; i <= deckCount; i++){
branch  0 taken 99%
branch  1 taken 1%
  2476170:  106:			if ((i % t) != 0){
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
  1350260:  107:				G.deck[p][i] = estate;
        -:  108:			}else{
  1125910:  109:				G.deck[p][i] = copper;
        -:  110:			}
        -:  111:		}		
      302:  112:	}else if (deckCount > 0 && ((discardCount + deckCount) >= (t*2))){
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  113:		//populate the deck with one treasury card and the discard with one
        -:  114:		//printf("Both used\n");
      546:  115:		for (i=0; i <= deckCount; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      455:  116:			if ((i % t) != 0){
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
      302:  117:				G.deck[p][i] = estate;
        -:  118:			}else{
      153:  119:				G.deck[p][i] = copper;
      153:  120:				remainTrs--;
        -:  121:			}
        -:  122:		}
        -:  123:		
    15496:  124:		for (i=0; i <= discardCount; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    15434:  125:			if ((i % t) != 0){
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
    10194:  126:				G.discard[p][i] = estate;
        -:  127:			}else{
     5240:  128:				G.discard[p][i] = copper;
     5240:  129:				remainTrs--;
        -:  130:				
     5240:  131:				if (remainTrs == 0){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       29:  132:					break;
        -:  133:				}
        -:  134:			}
        -:  135:		}
        -:  136:		
      120:  137:	}else if (discardCount >= (t*2)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  138:		//populate the discard with random cards with each 't' card as a treasury card
        -:  139:		//printf("\tDiscard used\n");
     6535:  140:		for (i=0; i <= discardCount; i++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     6415:  141:			if ((i % t) != 0){
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
     3874:  142:				G.discard[p][i] = estate;
        -:  143:			}else{
     2541:  144:				G.discard[p][i] = copper;
        -:  145:			}
        -:  146:		}
        -:  147:	}
        -:  148:     
        -:  149:    
    10000:  150:    r = checkplayAdventurer(p,handCount,t,&G, n);
call    0 returned 100%
        -:  151:	//assert (r == 0);
        -:  152:	
    10000:  153:	if (r != 0){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       34:  154:		printf("Player: %d, Interval: %d, Deck: %d, Discarc: %d, Hand: %d \n", p, t, deckCount, discardCount, handCount);
call    0 returned 100%
       34:  155:		f++;
        -:  156:	}
        -:  157:  }
        -:  158:
        1:  159:  printf("Number of tests: %d\n",n);
call    0 returned 100%
        1:  160:  printf("Number of fails: %d\n",f);
call    0 returned 100%
        -:  161:  
        1:  162:  return 0;
        -:  163:}
